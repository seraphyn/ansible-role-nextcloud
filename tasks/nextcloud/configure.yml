---

- name: "Nextcloud configure: set Nextcloud directory"
  ansible.builtin.set_fact:
    __nextcloud_install_dir: "{{ nextcloud_dl_tmp_dir + '/nextcloud' if (__nextcloud_do_install | bool or __nextcloud_do_upgrade | bool) else nextcloud_instance }}"

- name: "Nextcloud configure: copy skeleton directory"
  ansible.builtin.copy:
    src: "nextcloud/skeleton/"
    dest: "{{ nextcloud_config.system.skeletondirectory }}"
    owner: "{{ nextcloud_http_user }}"
    group: "{{ nextcloud_http_group }}"
    mode: 0640
    directory_mode: 0750
  when:
    - nextcloud_config.system.skeletondirectory is defined
    - nextcloud_config.system.skeletondirectory != ''

- name: "Nextcloud configure: copy theme"
  ansible.builtin.copy:
    src: "nextcloud/themes/{{ nextcloud_config.system.theme }}"
    dest: "{{ __nextcloud_install_dir }}/themes/"
    owner: "{{ nextcloud_http_user }}"
    group: "{{ nextcloud_http_group }}"
    mode: 0640
    directory_mode: 0750
  when: nextcloud_config.system.theme is defined

- name: "Nextcloud configure: copy custom apps"
  ansible.builtin.copy:
    src: "nextcloud/apps/{{ item }}"
    dest: "{{ __nextcloud_install_dir }}/apps/"
    owner: "{{ nextcloud_http_user }}"
    group: "{{ nextcloud_http_group }}"
    mode: 0640
    directory_mode: 0750
  with_items:
    - "{{ nextcloud_custom_apps }}"

- name: "Nextcloud configure: enable custom apps"
  become: true
  become_user: "{{ nextcloud_http_user }}"
  nextcloud_app:
    name: "{{ item }}"
    nextcloud_path: "{{ __nextcloud_install_dir }}"
    state: "enabled"
  register: __nextcloud_app_installed
  retries: 3
  delay: 3
  until: __nextcloud_app_installed is not failed
  with_items: "{{ nextcloud_custom_apps }}"

- name: "Nextcloud configure: get global preferences"
  ansible.builtin.command: php occ config:list --private --output=json
  args:
    chdir: "{{ __nextcloud_install_dir }}"
  register: __nextcloud_preferences
  changed_when: False
  check_mode: False
  no_log: True
  become: True
  become_user: "{{ nextcloud_http_user }}"

- name: "Nextcloud configure: parse global preferences as json and merge configurations"
  ansible.builtin.set_fact:
    __nextcloud_old_preferences:
      "{{ __nextcloud_preferences.stdout | from_json }}"
    __nextcloud_updated_preferences: >-
      {{
        __nextcloud_preferences.stdout | from_json | combine(nextcloud_config, recursive=True)
      }}
  no_log: True

- name: "Nextcloud configure: Get Nextcloud instanceid"
  ansible.builtin.set_fact:
    __nextcloud_instanceid: "{{ __nextcloud_old_preferences.system.instanceid }}"
  changed_when: False
  check_mode: False
  no_log: True

- name: "Nextcloud configure: Assert we have an instance id"
  ansible.builtin.assert:
    that: __nextcloud_instanceid | length > 0

- name: "Nextcloud configure: configure nextcloud and apps"
  when: __nextcloud_updated_preferences != __nextcloud_old_preferences
  block:
    - name: "Nextcloud configure: create temporary config file"
      ansible.builtin.tempfile:
        suffix: nextcloud
      register: __nextcloud_preferences
      check_mode: False

    - name: "Nextcloud configure: save config to file"
      ansible.builtin.copy:
        content: "{{ nextcloud_config | to_json }}"
        dest: "{{ __nextcloud_preferences.path }}"
        owner: "{{ nextcloud_http_user }}"
        group: "{{ nextcloud_http_group }}"
        mode: 0o400
      no_log: True
      check_mode: False

    - name: "Nextcloud configure: create temporary config diff file"
      ansible.builtin.tempfile:
        suffix: nextcloud
      register: __nextcloud_preferences_diff
      check_mode: False

    - name: "Nextcloud configure: save config to diff file"
      ansible.builtin.copy:
        content: "{{ __nextcloud_old_preferences | to_nice_yaml }}"
        dest: "{{ __nextcloud_preferences_diff.path }}"
        owner: "{{ nextcloud_http_user }}"
        group: "{{ nextcloud_http_group }}"
        mode: 0o400
      no_log: True
      check_mode: False

    - name: "Nextcloud configure: save updated config to file"
      ansible.builtin.copy:
        content: "{{ __nextcloud_updated_preferences | to_nice_yaml }}"
        dest: "{{ __nextcloud_preferences_diff.path }}"
        owner: "{{ nextcloud_http_user }}"
        group: "{{ nextcloud_http_group }}"
        mode: 0o400
      check_mode: True

    - name: "Nextcloud configure: set up global preferences"
      ansible.builtin.command: php occ config:import "{{ __nextcloud_preferences.path }}"
      args:
        chdir: "{{ __nextcloud_install_dir }}"
      become: True
      become_user: "{{ nextcloud_http_user }}"
      register: __nextcloud_result
      changed_when: __nextcloud_result is success
      # TODO: we should switch to an htaccess handler as well
      # notify: nextcloud update htaccess
      failed_when: (__nextcloud_result.stdout is not search('successfully imported')
        or __nextcloud_result is failed)

    # - meta: flush_handlers

    - name: "Nextcloud configure: delete temporary config files"
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      with_items:
        - "{{ __nextcloud_preferences.path }}"
        - "{{ __nextcloud_preferences_diff.path }}"
      check_mode: False

# the theming app is not compatible with using the old theming way above
- name: Copy images for theming app
  ansible.builtin.copy:
    src: "{{ item }}"
    dest: "{{ nextcloud_data_dir }}/appdata_{{ __nextcloud_instanceid }}/theming/images/"
    owner: "{{ nextcloud_http_user }}"
    group: "{{ nextcloud_http_group }}"
    mode: 0644
  with_fileglob:
    - "nextcloud/theming/images/{{ ansible_fqdn }}/*"
    - "nextcloud/theming/images/*"
  # nextcloud supports the following files
  # - background
  # - favicon
  # - logo
  # - logoheader

- name: "Run additional configuration commands"
  ansible.builtin.command: "{{ item }}"
  args:
    chdir: "{{ __nextcloud_install_dir }}"
  become: True
  become_user: "{{ nextcloud_http_user }}"
  changed_when: False
  with_items:
    - "{{ nextcloud_configure_additional_commands }}"
  when:
    - nextcloud_configure_additional_commands
